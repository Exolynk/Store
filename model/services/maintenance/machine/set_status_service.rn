pub async fn main(status, color) {
    let record = exo::get_record()?;
    let recent_status = record.get_value("status").unwrap_or(exo::Selection::new()).get_selected_single().unwrap_or("");

    //read out recent status first and if inactive and changing to active only set date new
    if recent_status == "inactive" || recent_status == "new" {
        let sel = exo::Selection::new();
        sel.set_selected_single(status);
        exo::db::update_record_value(record.uuid, "status", sel).await?;
        exo::db::update_record_value(record.uuid, "highlight_color", exo::Color::new(color)).await?;
        exo::db::update_record_value(record.uuid, "last_maintenance_datetime", exo::DateTime::new()).await?;
    } else if recent_status == "maintenance" {
        let sel = exo::Selection::new();
        sel.set_selected_single(status);
        exo::db::update_record_value(record.uuid, "status", sel).await?;
        exo::db::update_record_value(record.uuid, "highlight_color", exo::Color::new(color)).await?;
        exo::db::update_record_value(record.uuid, "last_maintenance_datetime", exo::DateTime::new()).await?;
        let table = record.get_value("service_report_table")?;
        let row = table.len();
        table.set_value(row, "date", exo::DateTime::new());
        table.set_value(row, "task", "Wartung durchgef√ºhrt (generierter Text)");
        exo::db::update_record_value(record.uuid, "service_report_table", table).await?;
    } else if recent_status == "active" {
        let sel = exo::Selection::new();
        sel.set_selected_single(status);
        exo::db::update_record_value(record.uuid, "status", sel).await?;
        exo::db::update_record_value(record.uuid, "highlight_color", exo::Color::new(color)).await?;
    }

    Ok(true)
}

pub async fn test() {
    main("active", "").await?;
}